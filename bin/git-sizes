#!/usr/bin/env sh
# Output the largest objects in a repository
#
# This script outputs full file sizes and does not account for zlib compression
# on-disk, nor delta computation/re-computation for packed objects. The result
# of those is better obtained by looking at the size of the `.git` directory.
#
# Flag | Description
# ---- | -----------
# -h   | Show this screen.
# -r   | Show the cumulative size of all versions of the same file. By default
#      | this ignores repetition, meaning multiple versions of the same file
#      | may appear more than once in the output.
# -t   | Hide totals.
# -b   | Show bytes instead of human-friendly units.

while getopts bhrt opt; do
    case $opt in
    h) awk 'NR == 1 { next } /^$/ { exit } { print substr($0, 3) }' "$0"
       exit ;;
    b) show_bytes=1;;
    r) repetition=1;;
    t) hide_totals=1;;
    esac
done
shift $(( OPTIND - 1 ))

git rev-list --objects --all --filter=object:type=blob \
    | git cat-file --batch-check='%(objecttype) %(objectsize) %(rest)' \
    | awk -v repetition="$repetition" '
    /^blob/ {
        fsize=$2; fname=$3

        if (repetition == 1) {
            totals[fname] += fsize
        } else {
            print fsize, fname
        }
    }
    END {
        for (i in totals) { print totals[i], i }
    }
    ' \
    | sort -nrk1 \
    | awk -v hide_totals="$hide_totals" -v show_bytes="$show_bytes" '

    # https://unix.stackexchange.com/a/44087
    function human(x) {
        if (show_bytes == 1) return x

        if (x<1000) {return x} else {x/=1024}
        s="kMGTEPZY";
        while (x>=1000 && length(s)>1)
            {x/=1024; s=substr(s,2)}
        return int(x+0.5) substr(s,1,1)
    }

    {
        print human($1), $2
        total += $1
    }

    END {
        if (hide_totals != 1) printf("\nTotal %s\n", human(total))
    }
    '
