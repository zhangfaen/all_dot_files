#!/usr/bin/env sh
# Output how many sub-dependencies each npm dependencies has
#
# Usage:
#
#     npm ls --all | npm-deps-report

while getopts h opt; do
    case $opt in
    h) awk 'NR == 1 { next } /^$/ { exit } { print substr($0, 3) }' "$0"
       exit ;;
    esac
done
shift $(( OPTIND - 1 ))

awk '
function clean_line() {
    sub(/UNMET PEER DEPENDENCY /, "", $0)
    sub(/ deduped/, "", $0)
    sub(/^[^a-zA-Z@0-9\s:]+/, "", $0)
    sub(/@[a-zA-Z0-9.<>=-]+$/, "", $0)
}

/\(empty\)/ { is_empty=1; exit; }

NR == 1 { next }

/^├── / || /^├─┬ / || /^└── / || /^└─┬ / {
    clean_line()
    main_deps[$0] = 0
    cur_dep = $0
    all_deps[$0] = 1
    next
}

{
    clean_line()
    if (main_deps[cur_dep] != 0) {
        duplicate_deps[$0] += 1
    }
    main_deps[cur_dep] += 1
    all_deps[$0] = 1
}

END {
    if (is_empty) {
        print "No installed packages." > "/dev/stderr"
        exit 1
    }

    print "Total deps:", length(all_deps)
    print "Top-level deps:", length(main_deps)
    print "Popular, reused deps:", length(duplicate_deps)
    print ""

    command = "sort -k 1,1nr -k 2,1"

    printf "Main deps:\n\n"
    for (i in main_deps) {
        printf("%4s\t%s\n", main_deps[i], i) | command
    }
    close(command)

    printf "\nPopular deps (times reused):\n\n"
    if (length(duplicate_deps)) {
        for (j in duplicate_deps) {
            printf("%4s\t%s\n", duplicate_deps[j], j) | command
        }
    } else {
        print "None"
    }
    close(command)
}
'
